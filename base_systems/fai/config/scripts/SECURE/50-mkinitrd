#! /bin/bash

error=0 ; trap "error=$((error|1))" ERR

# Copy our customized hook and script and "patch" the nfsroot
rsync -avzP /var/lib/fai/config/files/etc/initramfs-tools/ /etc/initramfs-tools/

# Copy our customized hook and script and "patch" the target so subsequent runs will work...
rsync -avzP /var/lib/fai/config/files/etc/initramfs-tools/ $target/etc/initramfs-tools/

# copy important files back to nfsroot so we can run mkinitramfs
cp $target/etc/fstab /etc/fstab
cp $target/etc/crypttab /etc/crypttab

# Copy the keys from the tmp dir to nfsroot's /boot for this run of mkinitrd, and to $target/boot for future runs
if [ -f /tmp/fai/crypttab ];then 
    for key in `awk '{print $3}' /tmp/fai/crypttab`; do
        if [ -f $key ];then
            /bin/cp $key $target/boot/
            /bin/cp $key /boot/
        fi
    done
    # rewrite the crypttab to use /boot instead of fai's temp space
    /bin/cp $target/etc/crypttab $target/etc/crypttab.bak
    sed -e 's/\/tmp\/fai/\/boot/' $target/etc/crypttab.bak > $target/etc/crypttab

    # copy the crypttab to /boot so we can hook it from there, and to $target/boot on subsequent runs
    /bin/cp $target/etc/crypttab $target/boot
    /bin/cp $target/etc/crypttab /boot
fi

/bin/cp /etc/initramfs-tools/modules /etc/initramfs-tools/modules.bak
/bin/cat<<EOF >>/etc/initramfs-tools/modules
aes-i586
dm-mod
dm-crypt
sha256-generic
EOF

# Create an initrd that will actually boot
TARGETVERSION=$(/bin/ls $target/lib/modules)
mkinitramfs -r $target -o $target/boot/initrd.img-${TARGETVERSION} ${TARGETVERSION}

# commented out for debugging
# /bin/cp /etc/initramfs-tools/modules.bak /etc/initramfs-tools/modules 

# Used to debug the initrd, no longer needed...
# ifconfig eth0 10.0.5.130 netmask 255.255.255.0 up
# route add default gw 10.0.5.1
# [ ! -d /root/.ssh ] && mkidir -p /root/.ssh 
# ssh-keyscan 10.0.5.1 > /root/.ssh/known_hosts
# scp /target/boot/initrd.img-2.6.26-2-486 whitejs@10.0.5.1:/tmp

exit $error
