#!/usr/bin/perl
use strict;
# This is the LDAP module that makes all the dynamic stuff in cfengine work
# determine this host's fqdn
# determine this host's domain name
# do a srv record lookup for ldap tls 389 on this domain name
#
# if this host's fqdn is one of the returned records:
#     try to connect to self's fqdn for LDAP, 
#     then try to connect to other records until one connects
#     if one is reached:     
#        look up cn=hostname, ou=Hosts, dc=domain, dc=domain, dc=domain
#        and activate all classes in record and exit.
#        if record is not found, back-off and retry on next pass. 
#     if none of the ldap servers can be reached, including oneself then assume localhost
#        is the first of it's kind and:
#            activate core_server
#                activate certificate_authority
#                    using "secret" create caroot tree
#                    using "secret" create gpg identity
#                activate ldap_server
#                    add slapd.conf for self's domain name (determined earlier) if not exists
#                    start slapd, 
#                    create self's host record if it doesn't exist, 
#                    define classes for self 
#                setup and run all core services 
#
# if no ldap servers are reachable and the fqdn is not in the ldap_tls_389 srv list,
#     then take no action; Assume the host is disconnected from the core completely.
#
# if 

package Superstring;
use Data::Dumper;

sub new{
use Sys::Hostname;
use Sys::Hostname::Long;
    my $class = shift;
    my $construct = shift if @_;
    my $self = { };
    bless ($self, $class);
    $self->{'cfg'}->{'fqdn'} = hostname_long();
    $self->{'cfg'}->{'hostname'} = hostname();
    $self->{'cfg'}->{'domain'} = $self->{'cfg'}->{'fqdn'};
    $self->{'cfg'}->{'domain'} =~ s/^$self->{'cfg'}->{'hostname'}\.//;
    push(@{ $self->{'cfclasses'} },'base');
    if($self->{'cfg'}->{'domain'} ne "")/{ 
        return $self;
    }
    return undef;
}
###################################################
# Get all the DNS records that could determine
#     what this host is supposed to be
###################################################
sub get_dns_records(){
use Net::DNS;
    my $self = shift;
    my $res = Net::DNS::Resolver->new;
    my $query = $res->query("_ldap._tls.".$self->{'cfg'}->{'domain'}, "SRV");
    if ($query){
        foreach my $rr (grep { $_->type eq 'SRV' } $query->answer) {
            push(@{ $self->{'cfg'}->{'ldap_servers'} },$rr->target);
            if($rr->target eq $self->{'cfg'}->{'fqdn'}){
                push(@{ $self->{'cfclasses'} },"ldap_server");
            }
        }
    }else{
          push(@{ $self->{'cfclasses'} },'dns_errors');
          warn "query failed: ", $res->errorstring, "\n";
    }
    my $query = $res->query($self->{'cfg'}->{'domain'}, "NS");
    if ($query){
        foreach my $rr (grep { $_->type eq 'NS' } $query->answer) {
            my $nameserver=$rr->nsdname;
            my $res2 = Net::DNS::Resolver->new;
            my $subquery = $res2->query($nameserver, "A");
            if ($subquery){
                foreach my $rra (grep { $_->type eq 'A' } $subquery->answer) {
                    push(@{ $self->{'cfg'}->{'dns'}->{'a'}->{$nameserver} },$rra->address);
                    my $res3 = Net::DNS::Resolver->new;
                    my $ptrquery = $res2->query($rra->address, "PTR");
                    if ($ptrquery){
                        foreach my $rrp (grep { $_->type eq 'PTR' } $ptrquery->answer) {
                            push(@{ $self->{'cfg'}->{'dns'}->{'ptr'}->{$rra->address} },$rrp->ptrdname);
                            if($rrp->ptrdname eq $self->{'cfg'}->{'fqdn'}){
                                push(@{ $self->{'cfclasses'} },"bind9_server");
                            }
                        }
                    }else{
                        push(@{ $self->{'cfclasses'} },'dns_errors');
                        warn "query failed: ", $res3->errorstring, "\n";
                    }
                }
            }else{
                push(@{ $self->{'cfclasses'} },'dns_errors');
                warn "query failed: ", $res2->errorstring, "\n";
            }
            push(@{ $self->{'cfg'}->{'dns'}->{'ns'} },$rr->nsdname);
            if($rr->nsdname eq $self->{'cfg'}->{'fqdn'}){
                push(@{ $self->{'cfclasses'} },"bind9_server");
            }
        }
    }else{
          warn "query failed: ", $res->errorstring, "\n";
    }
    return $self;
}

sub dumpclasses(){
    my $self=shift;
    foreach my $c (@{ $self->{'cfclasses'} }){
        print "+",$c,"\n";
    }
    return $self;
}

sub dumpvariables(){
    my $self=shift;
    foreach my $k (keys(%{ $self->{'variables'} })){
        print "=",$k,"=",$self->{'variables'}->{$k},"\n";
    }
    return $self;
}

sub ldap_servers{
    my $self=shift;
    return $self->{'cfg'}->{'ldap_servers'} if defined $self->{'cfg'}->{'ldap_servers'};
    return undef;
}

sub domain{
    my $self=shift;
    return $self->{'cfg'}->{'domain'} if defined $self->{'cfg'}->{'domain'};
    return undef;
}

sub base_hostname{
    my $self=shift;
    return $self->{'cfg'}->{'hostname'} if defined $self->{'cfg'}->{'hostname'};
    return undef;
}

sub fqdomain{
    my $self=shift;
    return $self->{'cfg'}->{'fqdn'} if defined $self->{'cfg'}->{'fqdn'};
    return undef;
}


###################################################
# Attempt to contact all the LDAP Servers 
#     and get this hosts LDAP record
###################################################
sub host_ldap_record(){
use Net::LDAP;
    my $self=shift;
    my $host=shift;
    my $searchdn="cn=".$self->base_hostname()."ou=Hosts,dc=".join(",dc=",split(/./,$self->domain()));
    print STDERR "-=[$searchdn]=-\n";
    # loop through ldap_records and see if we are one of them...
    my $iamone=0;
    foreach my $ldap_server ($self->ldap_servers){
        if($self->{'cfg'}->{'fqdn'} eq $ldap_server){ $iamone=1; }
    }
    # first try to fetch the record from oneself
    my $fetch_success=0;
    if($iamone){
        # get host record from our self
        print STDERR "Searching for $searchdn via ldap://".$self->fqdomain().":389\n";
    }
    if(! $fetch_success){
        foreach my $ldap_server ($self->ldap_servers){
            # We already tried self...
            next if($self->{'cfg'}->{'fqdn'} eq $ldap_server);
            print STDERR "Searching for $searchdn via ldap://".$ldap_server.":389\n";
        }
    }
    return $self;
}
 
1;

my $ss = Superstring->new();
if($ss){
    $ss->get_dns_records();
    if(defined($ss->ldap_servers())){
        print Data::Dumper->Dump([$ss->host_ldap_record($ss->fqdomain())]) 
            if defined($ss->host_ldap_record($ss->fqdomain()));
    }else{
        print "No ldap server SRV records found in DNS\n";
    }
    $ss->dumpclasses();
    $ss->dumpvariables();
}
print "+ca_root\n";
print Data::Dumper->Dump([$ss->host_ldap_record($ss)]);
exit;
