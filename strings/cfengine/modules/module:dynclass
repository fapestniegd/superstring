#!/usr/bin/perl
use strict;
# This is the LDAP module that makes all the dynamic stuff in cfengine work
# determine this host's fqdn
# determine this host's domain name
# do a srv record lookup for ldap tls 389 on this domain name
# if this host's fqdn is one of the returned records:
#     try to connect to self's fqdn for LDAP
#     
package Superstring;
use Data::Dumper;

sub new{
use Sys::Hostname;
use Sys::Hostname::Long;
    my $class = shift;
    my $construct = shift if @_;
    my $self = { };
    bless ($self, $class);
    $self->{'cfg'}->{'fqdn'} = hostname_long();
    $self->{'cfg'}->{'hostname'} = hostname();
    $self->{'cfg'}->{'domain'} = $self->{'cfg'}->{'fqdn'};
    $self->{'cfg'}->{'domain'} =~ s/^$self->{'cfg'}->{'hostname'}\.//;
    $self->{'variables'}->{'cfengine_root'}="/var/lib/cfengine2";
    if($self->{'cfg'}->{'domain'} ne ""){ 
        return $self;
    }
    return undef;
}
 
###################################################
# Determine from DNS if this host is an ldap_server
###################################################
sub get_srv_records(){
use Net::DNS;
    my $self = shift;
    my $res = Net::DNS::Resolver->new;
    my $query = $res->query("_ldap._tls.".$self->{'cfg'}->{'domain'}, "SRV");
    if ($query){
        foreach my $rr (grep { $_->type eq 'SRV' } $query->answer) {
            push(@{ $self->{'cfg'}->{'ldap_servers'} },$rr->target);
            if($rr->target eq $self->{'cfg'}->{'fqdn'}){
                push(@{ $self->{'cfclasses'} },"ldap_server");
            }
        }
    }else{
          warn "query failed: ", $res->errorstring, "\n";
    }
    my $query = $res->query($self->{'cfg'}->{'domain'}, "NS");
    if ($query){
        foreach my $rr (grep { $_->type eq 'NS' } $query->answer) {
            my $nameserver=$rr->nsdname;
            my $res2 = Net::DNS::Resolver->new;
            my $subquery = $res2->query($nameserver, "A");
            if ($subquery){
                foreach my $rra (grep { $_->type eq 'A' } $subquery->answer) {
                    push(@{ $self->{'cfg'}->{'dns'}->{'a'}->{$nameserver} },$rra->address);
                    my $res3 = Net::DNS::Resolver->new;
                    my $ptrquery = $res2->query($rra->address, "PTR");
                    if ($ptrquery){
                        foreach my $rrp (grep { $_->type eq 'PTR' } $ptrquery->answer) {
                            push(@{ $self->{'cfg'}->{'dns'}->{'ptr'}->{$rra->address} },$rrp->ptrdname);
                            if($rrp->ptrdname eq $self->{'cfg'}->{'fqdn'}){
                                push(@{ $self->{'cfclasses'} },"bind9_server");
                            }
                        }
                    }else{
                        warn "query failed: ", $res3->errorstring, "\n";
                    }
                }
            }else{
                warn "query failed: ", $res2->errorstring, "\n";
            }
            push(@{ $self->{'cfg'}->{'dns'}->{'ns'} },$rr->nsdname);
            if($rr->nsdname eq $self->{'cfg'}->{'fqdn'}){
                push(@{ $self->{'cfclasses'} },"bind9_server");
            }
        }
    }else{
          warn "query failed: ", $res->errorstring, "\n";
    }
    return $self;
}

sub dumpclasses(){
    my $self=shift;
    foreach my $c (@{ $self->{'cfclasses'} }){
        print "+",$c,"\n";
    }
    return $self;
}

sub dumpvariables(){
    my $self=shift;
    foreach my $k (keys(%{ $self->{'variables'} })){
        print "=",$k,"=",$self->{'variables'}->{$k},"\n";
    }
    return $self;
}

1;

my $ss = Superstring->new();
if($ss){
    $ss->get_srv_records();
    $ss->dumpclasses();
    $ss->dumpvariables();
}
#print Data::Dumper->Dump([$ss]);

exit;
# It is used to bootstrap the first ldap server
use FileHandle; 
exit unless(-f "/etc/cfengine/localclasses");

my $fh = new FileHandle "/etc/cfengine/localclasses", "r";
if (defined $fh) {
    while(my $line=<$fh>){
        chomp($line);
        $line=~s/ //g;
        print "+$line\n";
    }
    undef $fh;       # automatically closes the file
}
