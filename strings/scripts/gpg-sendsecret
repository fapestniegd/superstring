#!/bin/bash
#########################################################################
# prerequisites:
#   - packages:
#       - gpg
#       - dnsutils
#       - mailx 
#   - configs:
#       - hostname in /etc/hosts (and loopback line)
#       - exim configured as an internet site
#   - actions:
#       - gpg-init must have been run first
#########################################################################
export PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
mv_aside(){
    local ma_file="$*"
    local ma_dir=$(dirname "${ma_file}")
    local ma_base=$(basename "${ma_file}")
    local ma_suffix=$(echo ${ma_base}| sed -e 's/.*\.\([0-9]\+\)/\1/')
    local ma_nosuffix=$(echo ${ma_base} | sed -e 's/\.[0-9]\+//')
    if [ "$ma_suffix" == "$ma_base" ];then
        ma_suffix=0;
    else
        ma_suffix=`expr ${ma_suffix} + 1` 
    fi
    if [ -f "${ma_dir}/${ma_nosuffix}.${ma_suffix}" ];then
        mv_aside "${ma_dir}/${ma_nosuffix}.${ma_suffix}" 
    fi
    mv "${ma_dir}/${ma_base}" "${ma_dir}/${ma_nosuffix}.${ma_suffix}"
}
FQDN=$(hostname -f)
# This should probably check that the key is in there too.
gpg --list-keys|grep -q "^uid.*root@${FQDN}"
if [ $? -ne 0 ];then   
    logger -p local5.error -- "$0[$$] root keys do not exist. Aborting..."
    exit
fi
if [ ! -d ~/.gnupg ];then 
    logger -p local5.error -- "$0[$$] ~/.gnupg doesn't exist. Aborting..."
    exit;fi
if [ -z ${SECRET_PASSPHRASE} ];then
    logger -p local5.error -- "$0[$$] environment SECRET_PASSPHRASE not set. Aborting..."
    exit
fi

# We're looking at all our DNS servers here (the SOAs, not whatever's closest)
DOMAIN=$(dnsdomainname)
for ns in `dig +short -t ns ${DOMAIN}`;do
    NS=$(echo ${ns}|sed -e 's/\.$//')
    dig @${NS} +short -t txt keyserver.${DOMAIN} > /dev/null 2>&1
    EXITSTAT=$?
    if [ ${EXITSTAT} -eq 0 ]; then
       namesrv=${NS}
    fi
done

KEYSERVER=$(dig @${namesrv} +short -t txt keyserver.${DOMAIN}|sed -e 's/^"//' -e's/"$//')
KEYID=$(dig @${namesrv} +short -t txt keyid.${DOMAIN}|sed -e 's/^"//' -e's/"$//')

if [ -z ${KEYSERVER} ]; then 
    logger -p local5.error -- "$0[$$] Unable to determine keyserver from ${nameserv}. Aborting..."
    exit -1
fi
if [ -z ${KEYID} ]; then 
    logger -p local5.error -- "$0[$$] Unable to determine keyid from ${nameserv}. Aborting..."
    exit -1
fi

TRY=0;
EMAIL=$(gpg --list-keys ${KEYID}|grep uid | sed -e 's/.*<//' -e's/>//')
while [ -z "${EMAIL}" -a ${TRY} -lt 3 ];do
    TRY=`expr ${TRY} + 1`
    gpg --keyserver ${KEYSERVER} --recv-keys ${KEYID}
    EMAIL=$(gpg --list-keys ${KEYID}|grep uid | sed -e 's/.*<//' -e's/>//')
done

UMASK=$(umask)
umask 0077
if [ ! -d /etc/secrets ]; then mkdir -p /etc/secrets; fi
umask 0177
INSECURE_FILE=$(mktemp /dev/shm/insecure.XXXXX)
echo -e "y\n1\nThe integrity of private-key can no longer be ensured.\n\ny\n${SECRET_PASSPHRASE}\ny\n"|gpg -a -o ${INSECURE_FILE}  --command-fd 0 --status-fd 2 --gen-revoke root@${FQDN}
echo "secret_passphrase: ${SECRET_PASSPHRASE}" >> ${INSECURE_FILE}
echo ${SECRET_PASSPHRASE} | gpg --passphrase-fd 0 -a --export-secret-keys >> ${INSECURE_FILE}
gpg -a --export root@${FQDN} >> ${INSECURE_FILE}
umask 0377
if [ -f /etc/secrets/${EMAIL}.gpg ]; then
    mv_aside /etc/secrets/${EMAIL}.gpg
fi
echo ${SECRET_PASSPHRASE}|gpg --always-trust --passphrase-fd 0 -e -s -a --recipient ${EMAIL} --output /etc/secrets/${EMAIL}.gpg ${INSECURE_FILE} 
if [ ! -z "${INSECURE_FILE}" ];then
    rm -f ${INSECURE_FILE}
fi
umask ${UMASK}
cat /etc/secrets/${EMAIL}.gpg | mail -s "root@${FQDN}'s secrets" ${EMAIL}

