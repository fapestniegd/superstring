#/bin/bash
PATH="/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
########################################################################
# This is the bare-minimum a host needs to get initialized into the farm
########################################################################
# It's so configuring a host will consist of just running:
# 
# wget -qO /tmp/wcyd "$(dig +short -ttxt wcyd.$(dnsdomainname))" 
# chmod 755 /tmp/wcyd; /tmp/wcyd $(hostname -f) ${LDAP_HOST_PASSWORD}
#
################################################################################
# functions
################################################################################
usage(){
    echo "Usage $0 <fully.qualified.domain.nam> [<ldap_secret>]"
    exit 1;
}

####################################
# Common fixups 
####################################

fix_etc_hosts(){
    echo "rewriting /etc/hosts"
    if [ -f /etc/.new_etc_hosts ];then rm /etc/.new_etc_hosts;fi
    HNAME=$(hostname -s)
    FQDN=$(hostname -f)
    LOCAL=$(grep "127.0.0.1" /etc/hosts)
    if [ ! -z "${LOCAL}" ];then 
        echo "${LOCAL}"|grep -q "127.0.0.1 *localhost.localdomain *localhost"||\
          LOCAL=$(echo ${LOCAL}|sed -e 's/127.0.0.1.*/127.0.0.1 localhost.localdomain localhost/')
    else
        LOCAL="127.0.0.1 localhost.localdomain localhost" 
    fi
    PUBLIC=$(grep "${IPADDR}" /etc/hosts)
    if [ ! -z "${PUBLIC}" ];then 
        echo "${PUBLIC}"|grep -q "${IPADDR} *${FQDN} *${HNAME}"||\
            PUBLIC=$(echo "${PUBLIC}"| sed -e "s/${IPADDR}.*/${IPADDR} ${FQDN} ${HNAME}/")
    else
        PUBLIC="${IPADDR} ${FQDN} ${HNAME}"
    fi
    echo "${LOCAL}" > /etc/.new_etc_hosts
    echo "${PUBLIC}" >> /etc/.new_etc_hosts
    sed -e "s/127.0.0.1.*//" -e "s/${IPADDR}.*//" /etc/hosts |grep .>> /etc/.new_etc_hosts
    if [ ! -f /etc/hosts.dists ];then mv /etc/hosts /etc/hosts.dist;fi
    mv /etc/.new_etc_hosts /etc/hosts
}

####################################
# Debian style fixups
####################################
fix_etc_hostname(){
    echo "rewriting /etc/hostname"
    FQDN=$(hostname -f);
    if [ ! -z "${FQDN}" ]; then
        echo "${FQDN}" > /etc/hostname
    else
        echo "unable to determine host name in fix_etc_hostname.";
    fi
}

fix_etc_mailname(){
    echo "rewriting /etc/mailname"
    DOMAIN=$(dnsdomainname)
    if [ ! -z "${DOMAIN}" ]; then
        HNAME=$(hostname -s);
        FQDN=$(hostname -f);
        DOMAIN=$(echo $FQDN|sed -e "s/${HNAME}\.//")
    fi
    if [ ! -z "${DOMAIN}" ]; then
        echo "Setting mail name to ${DOMAIN}";
        echo "${DOMAIN}" > /etc/mailname
    else
        echo "unable to determine domain name in fix_etc_mailname.";
        exit -1;
    fi
}

####################################
# RedHat style fixups
####################################


####################################
# git our sources
####################################
puppet_init(){
    if [ ! -d /var/cache/git ]; then mkdir -p /var/cache/git;fi
    if [ ! -d /root/.ssh ];  then (umask 077; mkdir -p /root/.ssh);fi
    ssh-keyscan github.com >> /root/.ssh/known_hosts
    [ -d /var/cache/git/websages ]    || (cd /var/cache/git; git clone git@github.com:fapestniegd/websages.git)
    [ -d /var/cache/git/superstring ] || (cd /var/cache/git; git clone git://github.com/fapestniegd/superstring.git)          
    [ -d /var/cache/git/wcyd ]        || (cd /var/cache/git; git clone git://github.com/fapestniegd/wcyd.git)          
    [ -d /var/log/puppet ]            || /bin/mkdir -p /var/log/puppet
    if [ -f /var/cache/git/websages/etc/puppet/hosts/$(hostname -f).pp ]; then
        puppet --debug --modulepath=/var/cache/git/websages/etc/puppet/modules/ \
               /var/cache/git/websages/etc/puppet/hosts/$(hostname -f).pp \
               > /var/log/puppet/firstrun.log 2>&1
    else
        puppet --debug --modulepath=/var/cache/git/websages/etc/puppet/modules/ \
               /var/cache/git/websages/etc/puppet/hosts/default.pp \
               > /var/log/puppet/firstrun.log 2>&1
    fi
}

secret-init(){
    SECRET=$1;
    UMASK=$(umask)
    umask 0077
    if [ -z $SECRET ];then
        SUPPLIED="Auto-Generated"
        SECRET=$(dd if=/dev/random bs=512 count=1 2>/dev/null|md5sum|\
                     perl -MMIME::Base64 -ne 'print encode_base64($_)')
    else
        SUPPLIED="Provided"
    fi
/bin/cat<<EOSEC>/usr/local/sbin/secret
#!/bin/bash
# Password: ${SUPPLIED}
echo -n "${SECRET}"
EOSEC

    # just in case umask went awry...
    chown root:root /usr/local/sbin/secret
    chmod 700 /usr/local/sbin/secret
    umask ${UMASK}
    if [ ! -f /root/.ssh/id_dsa.pub ];then
        if [ ! -d /root/.ssh ];then
            mkdir -p /root/.ssh
            chown root:root /root/.ssh
            chmod 700 /root/.ssh
        fi
        ssh-keygen -t dsa -N '' -f /root/.ssh/id_dsa>/dev/null 2>&1
    fi
}

ldap-bind(){
    LDAP_URIS=($(dig +short -tsrv _ldap._tcp.$(dnsdomainname)|awk '{print "ldaps://"$4":"$3}'|sed -e 's/\.:/:/'))
    RESULT=1; IDX=0;
    while [ ${RESULT} -ne 0 -a ${IDX} -le ${#LDAP_URIS[@]} ];do
    ldapsearch -xH ${LDAP_URIS[${IDX}]}                                                 \
               -b "dc=$(dnsdomainname|sed -e 's/\./,dc=/g')"                            \
               -D "cn=$(hostname -s),ou=Hosts,dc=$(dnsdomainname|sed -e 's/\./,dc=/g')" \
               -w "$(/usr/local/sbin/secret)" "(cn=$(hostname -s))"
    RESULT=$?
    IDX=`expr ${IDX} + 1`
    done
    return ${RESULT}
}

ldapadd-selfrecord(){
    LDIF=$(mktemp /tmp/ldif.XXXX)
cat<<EOF>${LDIF}
dn: cn=$(hostname -s),ou=Hosts,dc=$(dnsdomainname|sed -e 's/\./,dc=/g')
configBase: #debian_lenny
objectClass: configHost
objectClass: device
objectClass: ipHost
objectClass: top
objectClass: simpleSecurityObject
objectClass: ldapPublicKey
cn: $(hostname -f)
configSet: ldap_client
EOF

# insert all the IP addresses
for IP in `ifconfig | grep "inet addr:"|sed -e 's/.*inet addr://g' -e 's/ .*//g'|grep -v 127.0.0.1`;do
echo "ipHostNumber: ${IP}" >> ${LDIF}
done

#sshPublicKey:: c3NoLWRzcyBBQUFBQjNOemFDMWtjM01BQUFDQkFMbHZBVEJKM0cyYkZzTUlmbFl
# sNzZEVjE2QnNwaEJwaEZnMWpJbFBxVUs0aFVtNnZCZUQzRklCNG44Qml0b1ZiTUpBRG92M1BuWnVy
# YjFTdHViRVIwamxqWXhhcXZHbWJsQys0YUo0WnZYOWpraXNkejkwNFEyL05EZ3k5NEVlZlRldEtmT
# DhFdXovUDQrMG5JNzJQcVZmRDhjbWxUcXAwOVk4WDZTcjR1SnRBQUFBRlFEUGFPdVZuTXdjdVlneU
# NBR2RjSUs4MXRtRVR3QUFBSUF1TjF3R21GZC85VjBVM1EvT1A5V21XZmNDemVIR29jdUhRNzk5b2J
# KZTBiSCtlSXcvcklRalJydkFpMmp2cFNTRUJ1aHpKU0FrRE0xMTdkREZJZUZNYUtHY0hyMWpJZU9a
# K1NObFI5MU5MWFBvYUszUlVrdGprTmkyT09MSjh6NW5tVTR2aVdEZUNvaDhDS1ZuL0lSSTFOQVBWU
# k0yTEl1amRlbmN6YVE3WlFBQUFJQXROVHNCTGNGQlFxL2tMa0IzanNENEZaU29sMUhpc2VBQWh5Sn
# Y4K1VueTZkWEozM2Z6bzhINWYwSlh2R2RMY0NvOWhhTUs0RmpGcjkxQ2JwcXFpYitxUFQyS3Y3L25
# kaG9NclYxZ05kZEtOSEJocVdFekF6NWJxR1E0ak85WGZyeE1Xc2c0SGJ0amlQVW92V01ma0g5UHVz
# WlNKV3Q4WFlJY3Zydnp3aXdBQT09IHJvb3RAdmlsaS53ZWJzYWdlcy5jb20K
#userPassword:: e1NTSEF9SEdZNkw2VWNDRzN1TzQySlo4eENMNTdiNHJoS1N6TXNwWWVCRXc9PQ=
#EOF

}

################################################################################
# MAIN
################################################################################

####################################
# Some usage validation
####################################
[ ${UID} -eq 0 ]||echo "Nononononoo. Be you root."
if [ $# -le 1 ]; then
    echo "not enough arguments"
    usage
fi
DESIRED_FQDN=$1; 
SUPPLIED_SECRET=$2; 
echo "${DESIRED_FQDN}"|grep  "\."
if [ $? -ne 0 ]; then usage; fi
hostname "${DESIRED_FQDN}"

####################################
# Get minimal facts about system
####################################
HNAME=$(hostname -s)
FQDN=$(hostname -f)
IFACE=$(route -n|awk -v e='0.0.0.0' '{if(($1==e)&&($2!=e)){print $NF;}}'|head -1)
IPADDR=$(ifconfig ${IFACE}|grep 'inet addr:'|cut -d: -f2|awk '{ print $1}')
[ -z ${IFACE} ]&& ( echo "I cannot determine the public interface"; exit -1)
[ -z ${IPADDR} ]&& ( echo "I cannot determine my IP address"; exit -1)
echo "Using ${IPADDR} on ${IFACE} to contact the policy host."

####################################
# Try to determine the distribution
####################################
if [ -f /etc/debian_version ];then
    DISTRO="debian"
else 
    if [ -f /etc/redhat_release ];then 
        DISTRO="redhat"
    else
        DISTRO="unknown"
    fi
fi

####################################
# Set up configuration management
####################################
case "${DISTRO}" in
    debian)
        echo "I appear to be running debian."
        apt-get update && apt-get dist-upgrade -y
        [ -z $(which dig) ] && apt-get install -y dns-browse
        [ -z $(which git) ] && apt-get install -y git-core
        [ -z $(which puppet) ] && apt-get install -y puppet
        fix_etc_hosts
        fix_etc_hostname
        fix_etc_mailname
        puppet_init
    ;;
    redhat)
        echo "I appear to be running redhat."
        yum clean all -y 
        yum update -y
        yum upgrade -y
        [ -z $(which dig) ] && yum install -y bind-utils
        [ -z $(which puppet) ] && yum install -y puppet
        fix_etc_hosts
        #fix_etc_sysconfig_network
    ;;
    *)
        echo "I don't appear to be running a disribution I support"
        exit -2;
    ;;
esac

####################################
# Save the secret, bind to ldap
####################################
/usr/local/sbin/ldap.conf-init
if [ ! -z ${SUPPLIED_SECRET} ];then
    secret-init ${SUPPLIED_SECRET}
    ldap-bind || ldapadd-selfrecord
else
    secret-init
    ldapadd-selfrecord
fi
